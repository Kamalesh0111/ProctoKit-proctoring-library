package com.proctor.sdk.session;

import org.java_websocket.WebSocket;

import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;

/**
 * Manages the lifecycle of all active ProctorSession objects.
 * It is responsible for creating, tracking, and removing sessions as students connect and disconnect.
 * In a production environment, the sessionId is provided by the developer's main application,
 * not generated by this SDK.
 */
public class SessionManager {

    private final ConcurrentHashMap<WebSocket, ProctorSession> activeSessions = new ConcurrentHashMap<>();
    private final Consumer<ProctorSession> newSessionHandler;

    public SessionManager(Consumer<ProctorSession> newSessionHandler) {
        this.newSessionHandler = newSessionHandler;
    }

    /**
     * Called by the WebSocket server when a new client connects.
     * It creates a new session and notifies the SDK's main listener.
     * @param conn The WebSocket connection object.
     * @param sessionId The pre-generated, unique ID for this session, provided by the developer's application.
     */
    public void startSession(WebSocket conn, String sessionId) {
        if (sessionId == null || sessionId.trim().isEmpty()) {
            throw new IllegalArgumentException("Session ID cannot be null or empty.");
        }
        
        ProctorSession session = new ProctorSession(sessionId, conn);
        activeSessions.put(conn, session);
        
        // Notify the developer's code that a new session has started.
        newSessionHandler.accept(session);
    }
    
    /**
     * Called by the WebSocket server when a client disconnects.
     * It cleans up the session and notifies its disconnect listeners.
     * @param conn The WebSocket connection object.
     */
    public void endSession(WebSocket conn) {
        ProctorSession session = activeSessions.remove(conn);
        if (session != null) {
            session.handleDisconnect();
        }
    }
    
    /**
     * Retrieves the session associated with a given WebSocket connection.
     * @param conn The WebSocket connection object.
     * @return The ProctorSession, or null if not found.
     */
    public ProctorSession getSession(WebSocket conn) {
        return activeSessions.get(conn);
    }
}

